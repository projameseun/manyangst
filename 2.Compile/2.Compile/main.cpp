#include <iostream>

/*
	c++코드로 작성한 프로그램이 실제 실행파일로 만들어 지는 과정
	                                   ==========컴파일 과정=======
	실행파일이 만들어지는 과정: 전처리 -> 컴파일 -> 빌드 -> 링킹연결 -> 실행파일 생성
										==========컴파일 과정=======

	컴파일(Compile):어떤 언어(c,c++,java등)의 코드 전체를 다른언어(기계어)로 바꿔주는 과정이다. 그리고 이것을 자동으로 수행해주는 프로그램을 컴파일러라고 부른다.
	따라서 소스코드를 실행 가능한 상태로 변환하기 위해 컴파일러 또는 인터프리터와 같은 프로그램을 사용한다.
	
	쉽게 설명을 다시해보면 c++같이 사람이 이해 할수있는 언어(고수준 언어)를 CPU가 이해 할수 있는 언어(저수준 언어:기계어,어샘블리어)로 번역하는 작업을 말한다.
	c++은 사용자가 알아들을수 잇는 언어이고 컴퓨터는 이해할수 없다.
	그래서 이거 컴퓨터가 이해 할수 있게 번역해주는일을 컴파일이라고 부른다.
	
	컴파일러:컴파일을 작업을 해주는 프로그램(컴퓨터가 이해 하도록 기계어로 번역해주는 프로그램)

	1.man(언어이름)을 c언어로 번역하든지, 아니면 기계어를 c언어로 번역하더라고도 컴파일이라고 우리는 칭할수 있다.
	대부분 근데 고수준언어를 기계어로 번역하는 프로그램을 일컫는다.

	디컴파일이란?
	컴파일러와 반대의 역할을 하는 컴퓨터 프로그램이다.
	기계어를 사용자가 사용하느 고급언어로 변환해주느 프로그램이다.
	
	컴퓨터 초기에는 프로그램을 작성하기 위해서 컴퓨터위에 바로 돌아가는 기계어를 통해 프로그래밍을 하였다.
	이런 과정은 생산성,호환성,디버깅등 모든면에서 효율적이지 않다...
	그래서 고수준언어를 작성하고 이를 번역기를 통해 기계어로 변역을 하게 되었다.
	
	컴파일러 와 비슷한 방식 프로그램이 인터프리터이다.
	컴파일러는 전체 소스코드를 읽고 분석하여 기계어로 번역하는 독립적인 프로그램을 말한다.
	반면, 인터프리터는 소스코드를 한 줄씩 읽고 번역하게 된다.
	
	==============컴파일러와 인터프리터의 차이점 ===========================
	1.작동방식
	컴파일러:전체 소스코드를 읽고 분석한 후에 기계어로 번역하여 실행 파일을 생성한다. 또 이렇게 생성된 파일은 독립적으로 실행 될수 있으며,
	실행 시에는 더 이상 소스코드가 필요하지 않다.
	인터프리터:소스코드를 한 줄씩 읽고 번역하여 즉시 실행한다. 즉 소스코드를 실행 하는동안 번역과 실행이 동시에 이루어 진다.
	
	2.실행속도
	컴파일러:소스 코드를 전체적으로 분석하고 번역하기 때문에 번역과정이 좀 더 오래 걸릴수 있지만, 실행 파일은 기계어로 되어 있어서 실행시에는 일반적으로 빠르다.
	인터프리터:코드를 한 줄씩 읽고 번역하고 즉시 실행하기 때문에 번역과정이 빠르지만, 실행 속도는 컴파일러에 비해서 상대적으로 느릴수 있다.
	
	3.오류발견
	컴파일러:전체를 번역하기 때문에 컴파일 과정에서 발생하는 오류를 미리 발견할수 있다.(애초에 오류가 나면 실행파일이 생성 되지 않는다).
	인터프리터:한 줄씩 실행하기 때문에 오류는 해당 줄이 실행 될때 발견된다.

	4.이식성(소프트웨어가 다른 환경 또는 플랫폼 에서 쉽게 이동하거나 실행될수 있는 능력)
	컴파일러:컴파일된 실행파일은 특정 플랫폼에서 종속적(소프트웨어나 시스템이 다른 요소나 구성요소에 의존하는 상태 모듈,라이브러리,프레임워크등을 말한다)일수 있으며,
	다른 플랫폼에서 실행하기 위해서는 다시 컴파일 해야될수 있다.
	인터프리터:일반적으로 플랫폼에 독립적이며, 소스코드를 실행하는 동안에 플랫폼에 맞게 번역되기때문에 이식성이 좋다.

	인터프리터를 사용하는 언어
	스크립트언어(인터프리터를 통해 실행되는 프로그래밍언어)
	대표적인게:python,javascript,php등이 있다.

	==============컴파일러와 인터프리터의 차이점 ===========================
전처리 하면됩니다....
	
	
	

*/


int main()
{
	int iNumber = 0;


	return 0;
}