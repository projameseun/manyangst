#include <iostream>
/*
프로그래밍이란:프로그램을 만드는 행위를 말한다. 간단히 말해서 개발이라고 부른다.
이 때 사용하는 언어들을 프로그래밍 언어라고 부른다.

대표적인 언어 -->c,c++,python,java등 ....

c에서 파생된 언어가 c++이다.
c++과 비슷한 언어가 java다.

프로그래밍을 우리가 배울때 처음에는 외워야 되는게 많다. 
프로그래밍도 하나의 언어이기 때문에 정해진 규칙이 있다.(정해진 문법들은 이해도 하겠지만 외워야 되는 영역도 있다)
프로그래밍을 결론적으로 외워야 되는건 외워야되고, 이해해야 되는건 이해를 해야 된다.
하나를 알아도 정확하게 이해해야 된다.

절차지향식언어, 객체지향식언어

c는 절차지향식 언어이다.
절차지향식 언어는 모든게 순서대로 이루어진다.(위에서 아래로)
장점:객체지향 언어보다 속다가 현저히 빠르다.
단점:유지 보수가 어렵다. 실행의 순사가 정해져 있으므로 코드의 순서가 바뀌게 된다면 동일 한결과를 가져오기 힘들다...
디버깅을 하기도 어렵다(버그를 찾기 어렵다)

c++는 객체지향식 언어이다.
객체===>세상에 존재하는 모든 것을 의미한다. ex)사물이나 생명체 등을 말한다.
물,컴퓨터,축구공,고양이,강아지,자동차,비행기 등 모든 사물 생명체들이 다된다.

컴퓨터로 예를 들어 보면...
pc한대를 완성 시킨다고 가정해보자.
CPU,RAM,MotherBoard,SSD,HDD,VGA(그래픽카드),POWER,CASE등 여러가지 부품이 존재 한다.
여기서 컴퓨터의 부품들을 객체라고 생각해보자.
만약에 HDD부폼쪽에서 문제가 생겼다고 가정해보자. 그러면 HDD만 교체하게 되면 간단히 해결을 할수 있게된다.
나머지 부품들은 건들일 필요가 없다.
어떤 부품이 고장 났을때 전체를 고치는 것이 아니라 그 해당 부품만 해결 할수 있기 때문에 유지보수가 매우좋다.

객체지향식 언어를 사용하는이유

캡슐화,상속,다형성 ...

캡슐화:외부로부터 보안을 할수 있다. 나중에 클래스를 배우게 되면 private,protected,public등이 있다.
상속:부모의 속성이 자식에게 물려져서 , 자식이 부모의 속성을 모두 가지게 되는 관계를 말한다.
다형성:같은 이름의 함수(오버로딩)을 통해서 여러개의 객체를 다르게 구현할수 있는것을 말한다.
ex) void Magic() 이라는 함수가 있다.
Magic()함수를 통해서 여러가지 마법을 구현할수 있다.(ICE,FIRE,THUNDER... 등) 

컴퓨터의 아주기본적인 하드웨어...

CPU - 뇌
RAM - 메모리 기억
HDD,SSD- 체력
MotherBoard - 몸
POWER - 체력
GUI- 눈
CASE - 피부

만약에 본인이 cpu나 컴퓨터가 실제로 무엇을하고 있는지 알고싶다면 윈도우시스템프로그래밍...책을 보는걸 추천한다.

가장 중요한 부분은 CPU라고 보면된다. 컴퓨터의 모든 연산은 CPU를 통해서 이루어 진다.
컴퓨터는 1,0으로만(이진수)를 알아 들을수 있다.
CPU안에 여러가지 기능중 (ALU: Arithmetic Logic Unit)산술 연산 장치라는게 있는데 이걸통해서 산술연산이 가능하다.
이거 말고도 cpu에서는 정말 많은 일들을 한다.
예전에 게임에는 그래픽 연산이 비용이 크지 않아서 cpu안에 내장된 그래픽으로 가능했다.
근데 요즘은 그래픽이 고퀄로 변해서 CPU안에서만 그걸 감당하기에는 너무 힘들다... 그래서 개발이된게 생긴게 GUIO 그래픽카드이다.






*/



int main()
{
	int iNumber = 0; 
	short sNum = 0;
	float fNum = 0.f;

	
	
	return 0;
}