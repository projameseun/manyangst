#include <iostream>

int main()
{
	/*
		포인터:메모리 주소를 저장하는 변수
		포인터도 변수다.

		x86 -> 32bit 환경을 말한다
		x64 -> 64bit 환경을 말한다
		
		포인터  변수가 메모리 주소를 저장하는 변수 이므로 , 타입(자료형) 관계없이 무조건 32bite환경에서는 4btye
		64bit환경에서는 8byte를 차지하게 된다.

	*/

	int  a = 100;
	
	int* ptr = &a;
	//자료형* 변수 ;

	//&(앰퍼샌드) 주소연산자 
	
	//역참조 
	//포인터 변수가 다른 변수의 메모리주소를 저장하고 있을때 해당 주소를 
	//가르켜 접근하여 값을 얻어 오거나 변경하는것을 말한다.

	//값을 변경하는경우
	*ptr = 200;

	//값을 얻어와서 출력하는 경우
	std::cout << (*ptr) << std::endl;
	
	/*
		포인터 변수마다 각각의 고유 자료형 이름을 가지는 이유는 변수가 시작되는 주소 앞에서
		얼마만큼의 크기를 읽어들이지 결정한다.
		해당포인터에 다른 자료형을 넣게되면 컴파일러는 오류를 띄운다.
		하지만 강제로 사용자가(강제형변환)을 통해서 변환을 할수 있다.
		하지만 원하지 않는 값이 들어가게 되는데
		그 이유는 변수를 표현할때 음수나,양수를 표현하는 방식이 다른것 처럼
		포인터도 자료형마다 표현이 다르다.
		
	*/

	float fNum = 10.f;
	ptr = (int*)&fNum;	//컴파일러는 오류를 범하는데 사용자가 강제 형변환을 하여 강제로 넣을수 있는상황...


	//아래를 출력하면 값이 매우크게 나오는데 이유는 fNum은 실수이다 실수를 표현하는 방식은 정수랑 다르기 때문에 크게 나온다.
	std::cout << *(ptr) << std::endl;	
	
	return 0;
}